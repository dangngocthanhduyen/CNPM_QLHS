#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyHocSinh_OnedotZero
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLHS")]
	public partial class DataLopDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBANGDIEMMONHOC(BANGDIEMMONHOC instance);
    partial void UpdateBANGDIEMMONHOC(BANGDIEMMONHOC instance);
    partial void DeleteBANGDIEMMONHOC(BANGDIEMMONHOC instance);
    partial void InsertMON(MON instance);
    partial void UpdateMON(MON instance);
    partial void DeleteMON(MON instance);
    partial void InsertHOCKI(HOCKI instance);
    partial void UpdateHOCKI(HOCKI instance);
    partial void DeleteHOCKI(HOCKI instance);
    partial void InsertHOCSINH(HOCSINH instance);
    partial void UpdateHOCSINH(HOCSINH instance);
    partial void DeleteHOCSINH(HOCSINH instance);
    partial void InsertKHOI(KHOI instance);
    partial void UpdateKHOI(KHOI instance);
    partial void DeleteKHOI(KHOI instance);
    partial void InsertLOP(LOP instance);
    partial void UpdateLOP(LOP instance);
    partial void DeleteLOP(LOP instance);
    #endregion
		
		public DataLopDataContext() : 
				base(global::QuanLyHocSinh_OnedotZero.Properties.Settings.Default.QLHSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataLopDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataLopDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataLopDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataLopDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BANGDIEMMONHOC> BANGDIEMMONHOCs
		{
			get
			{
				return this.GetTable<BANGDIEMMONHOC>();
			}
		}
		
		public System.Data.Linq.Table<MON> MONs
		{
			get
			{
				return this.GetTable<MON>();
			}
		}
		
		public System.Data.Linq.Table<HOCKI> HOCKIs
		{
			get
			{
				return this.GetTable<HOCKI>();
			}
		}
		
		public System.Data.Linq.Table<HOCSINH> HOCSINHs
		{
			get
			{
				return this.GetTable<HOCSINH>();
			}
		}
		
		public System.Data.Linq.Table<KHOI> KHOIs
		{
			get
			{
				return this.GetTable<KHOI>();
			}
		}
		
		public System.Data.Linq.Table<LOP> LOPs
		{
			get
			{
				return this.GetTable<LOP>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BANGDIEMMONHOC")]
	public partial class BANGDIEMMONHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MABANGDIEM;
		
		private System.Nullable<double> _DIEM15PHUT;
		
		private System.Nullable<double> _DIEM1TIET;
		
		private System.Nullable<double> _DIEMTB;
		
		private string _MAMON;
		
		private string _MAHOCKI;
		
		private string _MADANHSACH;
		
		private EntityRef<MON> _MON;
		
		private EntityRef<HOCKI> _HOCKI;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMABANGDIEMChanging(string value);
    partial void OnMABANGDIEMChanged();
    partial void OnDIEM15PHUTChanging(System.Nullable<double> value);
    partial void OnDIEM15PHUTChanged();
    partial void OnDIEM1TIETChanging(System.Nullable<double> value);
    partial void OnDIEM1TIETChanged();
    partial void OnDIEMTBChanging(System.Nullable<double> value);
    partial void OnDIEMTBChanged();
    partial void OnMAMONChanging(string value);
    partial void OnMAMONChanged();
    partial void OnMAHOCKIChanging(string value);
    partial void OnMAHOCKIChanged();
    partial void OnMADANHSACHChanging(string value);
    partial void OnMADANHSACHChanged();
    #endregion
		
		public BANGDIEMMONHOC()
		{
			this._MON = default(EntityRef<MON>);
			this._HOCKI = default(EntityRef<HOCKI>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MABANGDIEM", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MABANGDIEM
		{
			get
			{
				return this._MABANGDIEM;
			}
			set
			{
				if ((this._MABANGDIEM != value))
				{
					this.OnMABANGDIEMChanging(value);
					this.SendPropertyChanging();
					this._MABANGDIEM = value;
					this.SendPropertyChanged("MABANGDIEM");
					this.OnMABANGDIEMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIEM15PHUT", DbType="Float")]
		public System.Nullable<double> DIEM15PHUT
		{
			get
			{
				return this._DIEM15PHUT;
			}
			set
			{
				if ((this._DIEM15PHUT != value))
				{
					this.OnDIEM15PHUTChanging(value);
					this.SendPropertyChanging();
					this._DIEM15PHUT = value;
					this.SendPropertyChanged("DIEM15PHUT");
					this.OnDIEM15PHUTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIEM1TIET", DbType="Float")]
		public System.Nullable<double> DIEM1TIET
		{
			get
			{
				return this._DIEM1TIET;
			}
			set
			{
				if ((this._DIEM1TIET != value))
				{
					this.OnDIEM1TIETChanging(value);
					this.SendPropertyChanging();
					this._DIEM1TIET = value;
					this.SendPropertyChanged("DIEM1TIET");
					this.OnDIEM1TIETChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIEMTB", DbType="Float")]
		public System.Nullable<double> DIEMTB
		{
			get
			{
				return this._DIEMTB;
			}
			set
			{
				if ((this._DIEMTB != value))
				{
					this.OnDIEMTBChanging(value);
					this.SendPropertyChanging();
					this._DIEMTB = value;
					this.SendPropertyChanged("DIEMTB");
					this.OnDIEMTBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMON", DbType="NVarChar(50)")]
		public string MAMON
		{
			get
			{
				return this._MAMON;
			}
			set
			{
				if ((this._MAMON != value))
				{
					if (this._MON.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAMONChanging(value);
					this.SendPropertyChanging();
					this._MAMON = value;
					this.SendPropertyChanged("MAMON");
					this.OnMAMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHOCKI", DbType="NVarChar(50)")]
		public string MAHOCKI
		{
			get
			{
				return this._MAHOCKI;
			}
			set
			{
				if ((this._MAHOCKI != value))
				{
					if (this._HOCKI.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAHOCKIChanging(value);
					this.SendPropertyChanging();
					this._MAHOCKI = value;
					this.SendPropertyChanged("MAHOCKI");
					this.OnMAHOCKIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MADANHSACH", DbType="NVarChar(50)")]
		public string MADANHSACH
		{
			get
			{
				return this._MADANHSACH;
			}
			set
			{
				if ((this._MADANHSACH != value))
				{
					this.OnMADANHSACHChanging(value);
					this.SendPropertyChanging();
					this._MADANHSACH = value;
					this.SendPropertyChanged("MADANHSACH");
					this.OnMADANHSACHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MON_BANGDIEMMONHOC", Storage="_MON", ThisKey="MAMON", OtherKey="MAMON", IsForeignKey=true)]
		public MON MON
		{
			get
			{
				return this._MON.Entity;
			}
			set
			{
				MON previousValue = this._MON.Entity;
				if (((previousValue != value) 
							|| (this._MON.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MON.Entity = null;
						previousValue.BANGDIEMMONHOCs.Remove(this);
					}
					this._MON.Entity = value;
					if ((value != null))
					{
						value.BANGDIEMMONHOCs.Add(this);
						this._MAMON = value.MAMON;
					}
					else
					{
						this._MAMON = default(string);
					}
					this.SendPropertyChanged("MON");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKI_BANGDIEMMONHOC", Storage="_HOCKI", ThisKey="MAHOCKI", OtherKey="MAHOCKI", IsForeignKey=true)]
		public HOCKI HOCKI
		{
			get
			{
				return this._HOCKI.Entity;
			}
			set
			{
				HOCKI previousValue = this._HOCKI.Entity;
				if (((previousValue != value) 
							|| (this._HOCKI.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOCKI.Entity = null;
						previousValue.BANGDIEMMONHOCs.Remove(this);
					}
					this._HOCKI.Entity = value;
					if ((value != null))
					{
						value.BANGDIEMMONHOCs.Add(this);
						this._MAHOCKI = value.MAHOCKI;
					}
					else
					{
						this._MAHOCKI = default(string);
					}
					this.SendPropertyChanged("HOCKI");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MON")]
	public partial class MON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAMON;
		
		private string _TENMON;
		
		private EntitySet<BANGDIEMMONHOC> _BANGDIEMMONHOCs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAMONChanging(string value);
    partial void OnMAMONChanged();
    partial void OnTENMONChanging(string value);
    partial void OnTENMONChanged();
    #endregion
		
		public MON()
		{
			this._BANGDIEMMONHOCs = new EntitySet<BANGDIEMMONHOC>(new Action<BANGDIEMMONHOC>(this.attach_BANGDIEMMONHOCs), new Action<BANGDIEMMONHOC>(this.detach_BANGDIEMMONHOCs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMON", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAMON
		{
			get
			{
				return this._MAMON;
			}
			set
			{
				if ((this._MAMON != value))
				{
					this.OnMAMONChanging(value);
					this.SendPropertyChanging();
					this._MAMON = value;
					this.SendPropertyChanged("MAMON");
					this.OnMAMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENMON", DbType="NVarChar(50)")]
		public string TENMON
		{
			get
			{
				return this._TENMON;
			}
			set
			{
				if ((this._TENMON != value))
				{
					this.OnTENMONChanging(value);
					this.SendPropertyChanging();
					this._TENMON = value;
					this.SendPropertyChanged("TENMON");
					this.OnTENMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MON_BANGDIEMMONHOC", Storage="_BANGDIEMMONHOCs", ThisKey="MAMON", OtherKey="MAMON")]
		public EntitySet<BANGDIEMMONHOC> BANGDIEMMONHOCs
		{
			get
			{
				return this._BANGDIEMMONHOCs;
			}
			set
			{
				this._BANGDIEMMONHOCs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BANGDIEMMONHOCs(BANGDIEMMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.MON = this;
		}
		
		private void detach_BANGDIEMMONHOCs(BANGDIEMMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.MON = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOCKI")]
	public partial class HOCKI : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAHOCKI;
		
		private string _TENHOCKI;
		
		private EntitySet<BANGDIEMMONHOC> _BANGDIEMMONHOCs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAHOCKIChanging(string value);
    partial void OnMAHOCKIChanged();
    partial void OnTENHOCKIChanging(string value);
    partial void OnTENHOCKIChanged();
    #endregion
		
		public HOCKI()
		{
			this._BANGDIEMMONHOCs = new EntitySet<BANGDIEMMONHOC>(new Action<BANGDIEMMONHOC>(this.attach_BANGDIEMMONHOCs), new Action<BANGDIEMMONHOC>(this.detach_BANGDIEMMONHOCs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHOCKI", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAHOCKI
		{
			get
			{
				return this._MAHOCKI;
			}
			set
			{
				if ((this._MAHOCKI != value))
				{
					this.OnMAHOCKIChanging(value);
					this.SendPropertyChanging();
					this._MAHOCKI = value;
					this.SendPropertyChanged("MAHOCKI");
					this.OnMAHOCKIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENHOCKI", DbType="NVarChar(50)")]
		public string TENHOCKI
		{
			get
			{
				return this._TENHOCKI;
			}
			set
			{
				if ((this._TENHOCKI != value))
				{
					this.OnTENHOCKIChanging(value);
					this.SendPropertyChanging();
					this._TENHOCKI = value;
					this.SendPropertyChanged("TENHOCKI");
					this.OnTENHOCKIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKI_BANGDIEMMONHOC", Storage="_BANGDIEMMONHOCs", ThisKey="MAHOCKI", OtherKey="MAHOCKI")]
		public EntitySet<BANGDIEMMONHOC> BANGDIEMMONHOCs
		{
			get
			{
				return this._BANGDIEMMONHOCs;
			}
			set
			{
				this._BANGDIEMMONHOCs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BANGDIEMMONHOCs(BANGDIEMMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.HOCKI = this;
		}
		
		private void detach_BANGDIEMMONHOCs(BANGDIEMMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.HOCKI = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOCSINH")]
	public partial class HOCSINH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAHS;
		
		private string _HOTEN;
		
		private string _GIOITINH;
		
		private System.Nullable<System.DateTime> _NGAYSINH;
		
		private string _DIACHI;
		
		private string _EMAIL;
		
		private string _MALOP;
		
		private EntityRef<LOP> _LOP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAHSChanging(string value);
    partial void OnMAHSChanged();
    partial void OnHOTENChanging(string value);
    partial void OnHOTENChanged();
    partial void OnGIOITINHChanging(string value);
    partial void OnGIOITINHChanged();
    partial void OnNGAYSINHChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYSINHChanged();
    partial void OnDIACHIChanging(string value);
    partial void OnDIACHIChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnMALOPChanging(string value);
    partial void OnMALOPChanged();
    #endregion
		
		public HOCSINH()
		{
			this._LOP = default(EntityRef<LOP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHS", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAHS
		{
			get
			{
				return this._MAHS;
			}
			set
			{
				if ((this._MAHS != value))
				{
					this.OnMAHSChanging(value);
					this.SendPropertyChanging();
					this._MAHS = value;
					this.SendPropertyChanged("MAHS");
					this.OnMAHSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOTEN", DbType="NVarChar(50)")]
		public string HOTEN
		{
			get
			{
				return this._HOTEN;
			}
			set
			{
				if ((this._HOTEN != value))
				{
					this.OnHOTENChanging(value);
					this.SendPropertyChanging();
					this._HOTEN = value;
					this.SendPropertyChanged("HOTEN");
					this.OnHOTENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIOITINH", DbType="NVarChar(50)")]
		public string GIOITINH
		{
			get
			{
				return this._GIOITINH;
			}
			set
			{
				if ((this._GIOITINH != value))
				{
					this.OnGIOITINHChanging(value);
					this.SendPropertyChanging();
					this._GIOITINH = value;
					this.SendPropertyChanged("GIOITINH");
					this.OnGIOITINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYSINH", DbType="Date")]
		public System.Nullable<System.DateTime> NGAYSINH
		{
			get
			{
				return this._NGAYSINH;
			}
			set
			{
				if ((this._NGAYSINH != value))
				{
					this.OnNGAYSINHChanging(value);
					this.SendPropertyChanging();
					this._NGAYSINH = value;
					this.SendPropertyChanged("NGAYSINH");
					this.OnNGAYSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIACHI", DbType="NVarChar(50)")]
		public string DIACHI
		{
			get
			{
				return this._DIACHI;
			}
			set
			{
				if ((this._DIACHI != value))
				{
					this.OnDIACHIChanging(value);
					this.SendPropertyChanging();
					this._DIACHI = value;
					this.SendPropertyChanged("DIACHI");
					this.OnDIACHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="NVarChar(50)")]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="NVarChar(50)")]
		public string MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					if (this._LOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_HOCSINH", Storage="_LOP", ThisKey="MALOP", OtherKey="MALOP", IsForeignKey=true)]
		public LOP LOP
		{
			get
			{
				return this._LOP.Entity;
			}
			set
			{
				LOP previousValue = this._LOP.Entity;
				if (((previousValue != value) 
							|| (this._LOP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOP.Entity = null;
						previousValue.HOCSINHs.Remove(this);
					}
					this._LOP.Entity = value;
					if ((value != null))
					{
						value.HOCSINHs.Add(this);
						this._MALOP = value.MALOP;
					}
					else
					{
						this._MALOP = default(string);
					}
					this.SendPropertyChanged("LOP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KHOI")]
	public partial class KHOI : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAKHOI;
		
		private string _TENKHOI;
		
		private EntitySet<LOP> _LOPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAKHOIChanging(string value);
    partial void OnMAKHOIChanged();
    partial void OnTENKHOIChanging(string value);
    partial void OnTENKHOIChanged();
    #endregion
		
		public KHOI()
		{
			this._LOPs = new EntitySet<LOP>(new Action<LOP>(this.attach_LOPs), new Action<LOP>(this.detach_LOPs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAKHOI", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAKHOI
		{
			get
			{
				return this._MAKHOI;
			}
			set
			{
				if ((this._MAKHOI != value))
				{
					this.OnMAKHOIChanging(value);
					this.SendPropertyChanging();
					this._MAKHOI = value;
					this.SendPropertyChanged("MAKHOI");
					this.OnMAKHOIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENKHOI", DbType="NVarChar(50)")]
		public string TENKHOI
		{
			get
			{
				return this._TENKHOI;
			}
			set
			{
				if ((this._TENKHOI != value))
				{
					this.OnTENKHOIChanging(value);
					this.SendPropertyChanging();
					this._TENKHOI = value;
					this.SendPropertyChanged("TENKHOI");
					this.OnTENKHOIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KHOI_LOP", Storage="_LOPs", ThisKey="MAKHOI", OtherKey="MAKHOI")]
		public EntitySet<LOP> LOPs
		{
			get
			{
				return this._LOPs;
			}
			set
			{
				this._LOPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LOPs(LOP entity)
		{
			this.SendPropertyChanging();
			entity.KHOI = this;
		}
		
		private void detach_LOPs(LOP entity)
		{
			this.SendPropertyChanging();
			entity.KHOI = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOP")]
	public partial class LOP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MALOP;
		
		private string _TENLOP;
		
		private string _SISO;
		
		private string _MAKHOI;
		
		private EntitySet<HOCSINH> _HOCSINHs;
		
		private EntityRef<KHOI> _KHOI;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMALOPChanging(string value);
    partial void OnMALOPChanged();
    partial void OnTENLOPChanging(string value);
    partial void OnTENLOPChanged();
    partial void OnSISOChanging(string value);
    partial void OnSISOChanged();
    partial void OnMAKHOIChanging(string value);
    partial void OnMAKHOIChanged();
    #endregion
		
		public LOP()
		{
			this._HOCSINHs = new EntitySet<HOCSINH>(new Action<HOCSINH>(this.attach_HOCSINHs), new Action<HOCSINH>(this.detach_HOCSINHs));
			this._KHOI = default(EntityRef<KHOI>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLOP", DbType="NVarChar(50)")]
		public string TENLOP
		{
			get
			{
				return this._TENLOP;
			}
			set
			{
				if ((this._TENLOP != value))
				{
					this.OnTENLOPChanging(value);
					this.SendPropertyChanging();
					this._TENLOP = value;
					this.SendPropertyChanged("TENLOP");
					this.OnTENLOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SISO", DbType="NVarChar(50)")]
		public string SISO
		{
			get
			{
				return this._SISO;
			}
			set
			{
				if ((this._SISO != value))
				{
					this.OnSISOChanging(value);
					this.SendPropertyChanging();
					this._SISO = value;
					this.SendPropertyChanged("SISO");
					this.OnSISOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAKHOI", DbType="NVarChar(50)")]
		public string MAKHOI
		{
			get
			{
				return this._MAKHOI;
			}
			set
			{
				if ((this._MAKHOI != value))
				{
					if (this._KHOI.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAKHOIChanging(value);
					this.SendPropertyChanging();
					this._MAKHOI = value;
					this.SendPropertyChanged("MAKHOI");
					this.OnMAKHOIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_HOCSINH", Storage="_HOCSINHs", ThisKey="MALOP", OtherKey="MALOP")]
		public EntitySet<HOCSINH> HOCSINHs
		{
			get
			{
				return this._HOCSINHs;
			}
			set
			{
				this._HOCSINHs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KHOI_LOP", Storage="_KHOI", ThisKey="MAKHOI", OtherKey="MAKHOI", IsForeignKey=true)]
		public KHOI KHOI
		{
			get
			{
				return this._KHOI.Entity;
			}
			set
			{
				KHOI previousValue = this._KHOI.Entity;
				if (((previousValue != value) 
							|| (this._KHOI.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KHOI.Entity = null;
						previousValue.LOPs.Remove(this);
					}
					this._KHOI.Entity = value;
					if ((value != null))
					{
						value.LOPs.Add(this);
						this._MAKHOI = value.MAKHOI;
					}
					else
					{
						this._MAKHOI = default(string);
					}
					this.SendPropertyChanged("KHOI");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HOCSINHs(HOCSINH entity)
		{
			this.SendPropertyChanging();
			entity.LOP = this;
		}
		
		private void detach_HOCSINHs(HOCSINH entity)
		{
			this.SendPropertyChanging();
			entity.LOP = null;
		}
	}
}
#pragma warning restore 1591
